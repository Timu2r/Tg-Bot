const TelegramBot = require('node-telegram-bot-api')
const express = require('express')
const http = require('http')
const socketIO = require('socket.io')
const path = require('path')
const crypto = require('crypto')
require('dotenv').config()

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const ADMIN_CHAT_ID = '@Timu2r, @Buva112' // ID –∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç @userinfobot)
const PORT = process.env.PORT || 3000

const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY // 32-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è AES-256
const IV_LENGTH = 16 // –î–ª—è AES, —ç—Ç–æ 16 –±–∞–π—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function encrypt(text) {
    const iv = crypto.randomBytes(IV_LENGTH)
    const cipher = crypto.createCipheriv('aes-256-gcm', Buffer.from(ENCRYPTION_KEY, 'hex'), iv)
    const encrypted = Buffer.concat([cipher.update(text), cipher.final()])
    const authTag = cipher.getAuthTag()
    return `${iv.toString('hex')}:${authTag.toString('hex')}:${encrypted.toString('hex')}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function decrypt(text) {
    try {
        const textParts = text.split(':')
        const iv = Buffer.from(textParts.shift(), 'hex')
        const authTag = Buffer.from(textParts.shift(), 'hex')
        const encryptedText = Buffer.from(textParts.join(':'), 'hex')
        const decipher = crypto.createDecipheriv('aes-256-gcm', Buffer.from(ENCRYPTION_KEY, 'hex'), iv)
        decipher.setAuthTag(authTag)
        const decrypted = Buffer.concat([decipher.update(encryptedText), decipher.final()])
        return decrypted.toString()
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", error)
        return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]"
    }
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true })

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express()
const server = http.createServer(app)
const io = socketIO(server)

// Middleware
app.use(express.static('public'))
app.use(express.json())

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const messages = []
const users = new Map()
const deletedChats = new Set() // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
bot.onText(/\/start/, msg => {
	const chatId = msg.chat.id
	const user = msg.from

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω –ª–∏ —á–∞—Ç
	if (deletedChats.has(chatId)) {
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	users.set(chatId, {
		id: chatId,
		username: user.username,
		firstName: user.first_name,
		lastName: user.last_name,
		lastActive: new Date(),
	})

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.

üìù –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:
‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å
‚Ä¢ –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

‚úÖ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!

________________________________

üéâ –•ush kelibsiz, ${user.first_name}!

ü§ñ Men administrator bilan bog'lanish uchun botman. Siz menga istalgan xabarni yuborishingiz mumkin va administrator sizga albatta javob beradi.

üìù Siz nima qila olasiz:
‚Ä¢ Savol bering
‚Ä¢ Yordam oling
‚Ä¢ Yordam bilan bog'laning

‚úÖ Xabaringizni yozing va men uni administratorga yetkazaman!
	`.trim()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	bot.sendMessage(chatId, welcomeMessage)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	const userInfo = `${user.first_name} ${user.last_name || ''} ${
		user.username ? '@' + user.username : ''
	}`.trim()

	const adminNotification = `üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo}\nüÜî Chat ID: ${chatId}`

	if (chatId.toString() !== ADMIN_CHAT_ID) {
		bot.sendMessage(ADMIN_CHAT_ID, adminNotification)
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', msg => {
	const chatId = msg.chat.id
	const messageText = msg.text
	const user = msg.from

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start (–æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ)
	if (messageText === '/start') {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω –ª–∏ —á–∞—Ç
	if (deletedChats.has(chatId)) {
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	users.set(chatId, {
		id: chatId,
		username: user.username,
		firstName: user.first_name,
		lastName: user.last_name,
		lastActive: new Date(),
	})

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	const messageObj = {
		id: msg.message_id,
		chatId: chatId,
		text: encrypt(messageText), // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		user: {
			id: user.id,
			username: user.username,
			firstName: user.first_name,
			lastName: user.last_name,
		},
		timestamp: new Date(msg.date * 1000),
		replied: false,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	messages.unshift(messageObj)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
	const userInfo = `${user.first_name} ${user.last_name || ''} ${
		user.username ? '@' + user.username : ''
	}`.trim()
	const adminNotification = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${userInfo}\nüí¨ –¢–µ–∫—Å—Ç: ${messageText}\nüÜî Chat ID: ${chatId}`

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
	if (chatId.toString() !== ADMIN_CHAT_ID) {
		bot.sendMessage(ADMIN_CHAT_ID, adminNotification)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ WebSocket
	io.emit('newMessage', messageObj)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if (chatId.toString() !== ADMIN_CHAT_ID) {
		bot.sendMessage(
			chatId,
			`‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. 
‚úÖ Sizning xabaringiz qabul qilindi! Administrator sizga tez orada javob beradi`
		)
	}
})

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/messages', (req, res) => {
	// –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
	const activeMessages = messages
		.filter(msg => !deletedChats.has(msg.chatId))
		.map(msg => ({
			...msg,
			text: decrypt(msg.text), // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		}))
	res.json(activeMessages)
})

app.get('/api/users', (req, res) => {
	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
	const activeUsers = Array.from(users.values()).filter(
		user => !deletedChats.has(user.id)
	)
	res.json(activeUsers)
})

app.post('/api/reply', (req, res) => {
	const { chatId, message } = req.body

	if (!chatId || !message) {
		return res.status(400).json({ error: 'Chat ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω –ª–∏ —á–∞—Ç
	if (deletedChats.has(chatId)) {
		return res.status(400).json({ error: '–ß–∞—Ç —É–¥–∞–ª–µ–Ω' })
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å "–£—á–∏—Ç–µ–ª—å:" –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	const messageWithSignature = `üë®‚Äçüè´ Ustoz :\n\n${message}`

	bot
		.sendMessage(chatId, messageWithSignature)
		.then(() => {
			// –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
			const messageIndex = messages.findIndex(msg => msg.chatId === chatId)
			if (messageIndex !== -1) {
				messages[messageIndex].replied = true
			}

			io.emit('messageReplied', { chatId, message: messageWithSignature })
			res.json({ success: true })
		})
		.catch(error => {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' })
		})
})

// –ù–æ–≤—ã–π API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
app.post('/api/delete-chat', (req, res) => {
	const { chatId } = req.body

	if (!chatId) {
		return res.status(400).json({ error: 'Chat ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
	deletedChats.add(chatId)

	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
	users.delete(chatId)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
	io.emit('chatDeleted', { chatId })

	res.json({ success: true })
})

// HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/', (req, res) => {
	res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Telegram Bot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            padding: 10px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: #0088cc;
            color: white;
            padding: 15px 20px;
            text-align: center;
        }

        .header h1 {
            font-size: 1.5rem;
            margin-bottom: 5px;
        }

        .header p {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            overflow-x: auto;
        }

        .tab {
            padding: 12px 20px;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 14px;
            transition: background-color 0.3s;
            white-space: nowrap;
            flex-shrink: 0;
        }

        .tab.active {
            background: white;
            border-bottom: 2px solid #0088cc;
        }

        .tab-content {
            display: none;
            padding: 15px;
        }

        .tab-content.active {
            display: block;
        }

        .message-item {
            background: #f8f9fa;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #0088cc;
            position: relative;
        }

        .message-item.replied {
            border-left-color: #28a745;
            background: #f8fff8;
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
            gap: 10px;
        }

        .user-info {
            font-weight: bold;
            color: #0088cc;
            flex: 1;
            min-width: 0;
        }

        .timestamp {
            color: #6c757d;
            font-size: 12px;
            flex-shrink: 0;
        }

        .message-text {
            margin: 10px 0;
            padding: 10px;
            background: white;
            border-radius: 5px;
            border: 1px solid #dee2e6;
            word-wrap: break-word;
        }

        .message-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }

        .delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.3s;
        }

        .delete-btn:hover {
            background: #c82333;
        }

        .reply-section {
            margin-top: 10px;
        }

        .reply-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            resize: vertical;
            min-height: 60px;
            font-size: 14px;
        }

        .reply-btn {
            background: #0088cc;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s;
            font-size: 14px;
        }

        .reply-btn:hover {
            background: #006ba3;
        }

        .reply-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .user-item {
            background: #f8f9fa;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            position: relative;
        }

        .user-item-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 10px;
        }

        .user-details {
            flex: 1;
            min-width: 0;
        }

        .user-name {
            font-weight: bold;
            color: #0088cc;
            margin-bottom: 5px;
        }

        .user-username {
            color: #6c757d;
            font-size: 12px;
            margin-bottom: 2px;
        }

        .user-id {
            color: #6c757d;
            font-size: 11px;
        }

        .user-actions {
            display: flex;
            flex-direction: column;
            gap: 5px;
            flex-shrink: 0;
        }

        .message-user-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 12px;
        }

        .message-user-btn:hover {
            background: #218838;
        }

        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 5px;
        }

        .status-new {
            background: #dc3545;
        }

        .status-replied {
            background: #28a745;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }

        .close:hover {
            color: black;
        }

        .confirm-modal {
            text-align: center;
        }

        .confirm-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .confirm-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

        .confirm-btn.danger {
            background: #dc3545;
            color: white;
        }

        .confirm-btn.secondary {
            background: #6c757d;
            color: white;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
        }

        .empty-state h3 {
            margin-bottom: 10px;
            color: #495057;
        }

        /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
        @media (max-width: 768px) {
            body {
                padding: 0;
            }

            .container {
                margin: 0;
                border-radius: 0;
                min-height: 100vh;
            }

            .header {
                padding: 10px 15px;
            }

            .header h1 {
                font-size: 1.2rem;
            }

            .tabs {
                justify-content: space-around;
            }

            .tab {
                flex: 1;
                text-align: center;
                padding: 10px 5px;
                font-size: 12px;
            }

            .tab-content {
                padding: 10px;
            }

            .message-item {
                padding: 12px;
                margin: 8px 0;
            }

            .message-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }

            .user-info {
                font-size: 14px;
            }

            .timestamp {
                font-size: 11px;
            }

            .message-text {
                font-size: 14px;
                padding: 8px;
            }

            .message-actions {
                flex-direction: column;
                gap: 5px;
            }

            .reply-input {
                font-size: 16px; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑—É–º –Ω–∞ iOS */
            }

            .user-item {
                padding: 12px;
            }

            .user-item-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }

            .user-actions {
                flex-direction: row;
                width: 100%;
            }

            .message-user-btn {
                flex: 1;
                padding: 8px;
            }

            .modal-content {
                margin: 5% auto;
                padding: 15px;
                width: 95%;
                max-height: 90vh;
            }

            .empty-state {
                padding: 20px 15px;
            }
        }

        @media (max-width: 480px) {
            .header h1 {
                font-size: 1.1rem;
            }

            .header p {
                font-size: 0.8rem;
            }

            .tab {
                padding: 8px 3px;
                font-size: 11px;
            }

            .message-item {
                padding: 10px;
            }

            .user-item {
                padding: 10px;
            }

            .modal-content {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Telegram Bot</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</p>
        </div>

        <div class="tabs">
            <button class="tab active" onclick="showTab('messages')">üí¨ –°–æ–æ–±—â–µ–Ω–∏—è</button>
            <button class="tab" onclick="showTab('users')">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
        </div>

        <div id="messages-tab" class="tab-content active">
            <div id="messages-list"></div>
        </div>

        <div id="users-tab" class="tab-content">
            <div id="users-list"></div>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
            <div id="modal-user-info"></div>
            <textarea id="modal-message" class="reply-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."></textarea>
            <button id="modal-send-btn" class="reply-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è -->
    <div id="confirmModal" class="modal">
        <div class="modal-content confirm-modal">
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?</p>
            <p style="font-size: 12px; color: #666; margin-top: 10px;">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
            <div class="confirm-buttons">
                <button id="confirm-delete-btn" class="confirm-btn danger">–£–¥–∞–ª–∏—Ç—å</button>
                <button id="cancel-delete-btn" class="confirm-btn secondary">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentUserId = null;
        let chatToDelete = null;

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        function loadMessages() {
            fetch('/api/messages')
                .then(response => response.json())
                .then(messages => {
                    const messagesList = document.getElementById('messages-list');
                    messagesList.innerHTML = '';
                    
                    if (messages.length === 0) {
                        messagesList.innerHTML = \`
                            <div class="empty-state">
                                <h3>üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                                <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
                            </div>
                        \`;
                        return;
                    }
                    
                    messages.forEach(message => {
                        const messageElement = createMessageElement(message);
                        messagesList.appendChild(messageElement);
                    });
                });
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        function loadUsers() {
            fetch('/api/users')
                .then(response => response.json())
                .then(users => {
                    const usersList = document.getElementById('users-list');
                    usersList.innerHTML = '';
                    
                    if (users.length === 0) {
                        usersList.innerHTML = \`
                            <div class="empty-state">
                                <h3>üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                                <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</p>
                            </div>
                        \`;
                        return;
                    }
                    
                    users.forEach(user => {
                        const userElement = createUserElement(user);
                        usersList.appendChild(userElement);
                    });
                });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function createMessageElement(message) {
            const div = document.createElement('div');
            div.className = 'message-item' + (message.replied ? ' replied' : '');
            
            const userInfo = [message.user.firstName, message.user.lastName].filter(Boolean).join(' ');
            const username = message.user.username ? '@' + message.user.username : '–±–µ–∑ username';
            
            div.innerHTML = \`
                <div class="message-header">
                    <div class="user-info">
                        <span class="status-indicator \${message.replied ? 'status-replied' : 'status-new'}"></span>
                        \${userInfo} (\${username})
                    </div>
                    <div class="timestamp">\${new Date(message.timestamp).toLocaleString('ru-RU')}</div>
                </div>
                <div class="message-text">\${message.text}</div>
                <div class="user-details" style="font-size: 11px; color: #666; margin: 5px 0;">
                    <strong>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> \${userInfo}<br>
                    <strong>üìù Username:</strong> \${username}<br>
                    <strong>üÜî Chat ID:</strong> \${message.chatId}<br>
                    <strong>üÜî User ID:</strong> \${message.user.id}
                </div>
                <div class="message-actions">
                    <button class="delete-btn" onclick="confirmDeleteChat(\${message.chatId})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç</button>
                </div>
                <div class="reply-section">
                    <textarea class="reply-input" placeholder="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..." id="reply-\${message.chatId}"></textarea>
                    <button class="reply-btn" onclick="replyToMessage(\${message.chatId})">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                </div>
            \`;
            
            return div;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function createUserElement(user) {
            const div = document.createElement('div');
            div.className = 'user-item';
            
            const userInfo = [user.firstName, user.lastName].filter(Boolean).join(' ');
            const username = user.username ? '@' + user.username : '–±–µ–∑ username';
            
            div.innerHTML = \`
                <div class="user-item-header">
                    <div class="user-details">
                        <div class="user-name">\${userInfo} (\${username})</div>
                        <div class="user-id">üÜî Chat ID: \${user.id}</div>
                        <div class="user-id">üÜî User ID: \${user.id}</div>
                        <div class="user-username">üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: \${new Date(user.lastActive).toLocaleString('ru-RU')}</div>
                    </div>
                    <div class="user-actions">
                        <button class="message-user-btn" onclick="openMessageModal(\${user.id}, '\${userInfo}', '\${username}')">
                            üì© –ù–∞–ø–∏—Å–∞—Ç—å
                        </button>
                        <button class="delete-btn" onclick="confirmDeleteChat(\${user.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            \`;
            
            return div;
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
        function confirmDeleteChat(chatId) {
            chatToDelete = chatId;
            document.getElementById('confirmModal').style.display = 'block';
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        function deleteChat(chatId) {
            fetch('/api/delete-chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ chatId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadMessages();
                    loadUsers();
                    document.getElementById('confirmModal').style.display = 'none';
                } else {
                    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞');
                }
            });
        }

        // –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        function replyToMessage(chatId) {
            const textarea = document.getElementById(\`reply-\${chatId}\`);
            const message = textarea.value.trim();
            
            if (!message) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                return;
            }
            
            fetch('/api/reply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ chatId, message }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    textarea.value = '';
                    loadMessages();
                } else {
                    alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
                }
            });
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        function openMessageModal(userId, userInfo, username) {
            currentUserId = userId;
            document.getElementById('modal-user-info').innerHTML = \`
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <p><strong>üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> \${userInfo}</p>
                    <p><strong>üìù Username:</strong> \${username}</p>
                    <p><strong>üÜî Chat ID:</strong> \${userId}</p>
                    <p><strong>üÜî User ID:</strong> \${userId}</p>
                </div>
            \`;
            document.getElementById('messageModal').style.display = 'block';
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('modal-send-btn').addEventListener('click', function() {
            const message = document.getElementById('modal-message').value.trim();
            
            if (!message) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                return;
            }
            
            fetch('/api/reply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ chatId: currentUserId, message }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('modal-message').value = '';
                    document.getElementById('messageModal').style.display = 'none';
                    loadMessages();
                    loadUsers();
                } else {
                    alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
                }
            });
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        function showTab(tabName) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.getElementById(tabName + '-tab').classList.add('active');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
            event.target.classList.add('active');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
            if (tabName === 'messages') {
                loadMessages();
            } else if (tabName === 'users') {
                loadUsers();
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelector('.close').addEventListener('click', function() {
            document.getElementById('messageModal').style.display = 'none';
        });

        document.getElementById('cancel-delete-btn').addEventListener('click', function() {
            document.getElementById('confirmModal').style.display = 'none';
            chatToDelete = null;
        });

        document.getElementById('confirm-delete-btn').addEventListener('click', function() {
            if (chatToDelete) {
                deleteChat(chatToDelete);
                chatToDelete = null;
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        window.addEventListener('click', function(event) {
            const messageModal = document.getElementById('messageModal');
            const confirmModal = document.getElementById('confirmModal');
            
            if (event.target === messageModal) {
                messageModal.style.display = 'none';
            }
            
            if (event.target === confirmModal) {
                confirmModal.style.display = 'none';
                chatToDelete = null;
            }
        });

        // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        socket.on('newMessage', function(message) {
            loadMessages();
            loadUsers();
        });

        socket.on('messageReplied', function(data) {
            loadMessages();
        });

        socket.on('chatDeleted', function(data) {
            loadMessages();
            loadUsers();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Enter' && event.ctrlKey) {
                if (event.target.id === 'modal-message') {
                    document.getElementById('modal-send-btn').click();
                } else if (event.target.classList.contains('reply-input')) {
                    const chatId = event.target.id.split('-')[1];
                    replyToMessage(chatId);
                }
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        loadMessages();
        loadUsers();
    </script>
</body>
</html>
    `)
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
	console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–µ ${PORT}`)
	console.log(`üì± Telegram Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`)
	console.log(`üîó –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}`)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
	console.error('Unhandled Rejection at:', promise, 'reason:', reason)
})

process.on('uncaughtException', error => {
	console.error('Uncaught Exception:', error)
})

// Graceful shutdown
process.on('SIGTERM', () => {
	console.log('SIGTERM received, shutting down gracefully')
	server.close(() => {
		console.log('Process terminated')
	})
})

process.on('SIGINT', () => {
	console.log('SIGINT received, shutting down gracefully')
	server.close(() => {
		console.log('Process terminated')
	})
})
