require('dotenv').config()
const { Telegraf, Markup } = require('telegraf')
const crypto = require('crypto')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN)

// –ê–¥–º–∏–Ω—ã (—É—á–∏—Ç–µ–ª—è) –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const ADMIN_IDS = process.env.ADMIN_CHAT_IDS
    ? process.env.ADMIN_CHAT_IDS.split(',').map(id => parseInt(id.trim()))
    : []
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'default_encryption_key' // –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (!process.env.BOT_TOKEN) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    process.exit(1)
}

if (!process.env.ADMIN_CHAT_IDS) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: ADMIN_CHAT_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    process.exit(1)
}

if (ADMIN_IDS.length === 0) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å ADMIN_CHAT_IDS')
    process.exit(1)
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const tempData = {
    lastMessageTime: new Map(),
    pendingMessages: new Map(),
    messageCounter: 0,
    awaitingResponse: new Map(),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤
function escapeMarkdown(text) {
    return text.replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1')
}

// –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function encryptData(text) {
    const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY)
    let encrypted = cipher.update(text, 'utf8', 'hex')
    encrypted += cipher.final('hex')
    return encrypted
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function decryptData(encryptedText) {
    const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY)
    let decrypted = decipher.update(encryptedText, 'hex', 'utf8')
    decrypted += decipher.final('utf8')
    return decrypted
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
    return ADMIN_IDS.includes(userId)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (30 —Å–µ–∫—É–Ω–¥)
function canSendMessage(userId) {
    const lastTime = tempData.lastMessageTime.get(userId)
    if (!lastTime) return true
    return Date.now() - lastTime >= 30000
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function getTimeUntilNextMessage(userId) {
    const lastTime = tempData.lastMessageTime.get(userId)
    if (!lastTime) return 0
    const timeLeft = 30000 - (Date.now() - lastTime)
    return Math.max(0, Math.ceil(timeLeft / 1000))
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
function formatTime(seconds) {
    if (seconds < 60) return `${seconds} soniya`
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes} daqiqa ${remainingSeconds} soniya`
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
function generateMessageId() {
    return ++tempData.messageCounter
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
    const userId = ctx.from?.id
    const userType = isAdmin(userId) ? 'ADMIN' : 'STUDENT'
    const action = ctx.message?.text || ctx.callbackQuery?.data || 'unknown'

    console.log(`[${new Date().toISOString()}] ${userType} ${userId}: ${action}`)
    return next()
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
bot.command('myid', async ctx => {
    const userId = ctx.from.id
    const chatId = ctx.chat.id
    const username = ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    const firstName = ctx.from.first_name || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    await ctx.reply(
        `üÜî *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n` +
        `üë§ User ID: \`${userId}\`\n` +
        `üí¨ Chat ID: \`${chatId}\`\n` +
        `üë§ Username: @${username}\n` +
        `üìù –ò–º—è: ${firstName}\n\n` +
        `üìã *–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chat ID*`,
        { parse_mode: 'Markdown' }
    )
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
bot.command('status', async ctx => {
    const userId = ctx.from.id
    const chatId = ctx.chat.id
    const isUserAdmin = isAdmin(userId)
    const isChatAdmin = isAdmin(chatId)

    await ctx.reply(
        `üìä *–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n` +
        `üë§ User ID: ${userId}\n` +
        `üí¨ Chat ID: ${chatId}\n` +
        `üîë –ê–¥–º–∏–Ω (–ø–æ User ID): ${isUserAdmin ? '‚úÖ' : '‚ùå'}\n` +
        `üîë –ê–¥–º–∏–Ω (–ø–æ Chat ID): ${isChatAdmin ? '‚úÖ' : '‚ùå'}\n\n` +
        `üìã *–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã:* ${ADMIN_IDS.join(', ')}`,
        { parse_mode: 'Markdown' }
    )
})

bot.start(async ctx => {
    const userId = ctx.from.id
    const chatId = ctx.chat.id

    if (isAdmin(userId) || isAdmin(chatId)) {
        await ctx.replyWithMarkdown(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É—á–∏—Ç–µ–ª—å!* ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üìä *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞*\n\n` +
            `üÜî *–í–∞—à Chat ID:* \`${chatId}\``
        )
    } else {
        await ctx.replyWithMarkdown(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üåü *Assalomu alaykum!* üåü  ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üìö *O'qituvchi-O'quvchi Bot*ga xush kelibsiz!\n\n` +
            `üîπ *Savol berish uchun tugmani bosing:*`,
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úçÔ∏è Savol berish', 'ask_question')],
            ])
        )
    }
})

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
bot.action('ask_question', async ctx => {
    const userId = ctx.from.id

    if (isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', { show_alert: true })
        return
    }

    if (!canSendMessage(userId)) {
        const timeLeft = getTimeUntilNextMessage(userId)
        await ctx.answerCbQuery(
            `‚è∞ Keyingi savol berish uchun ${formatTime(timeLeft)} kutishingiz kerak!`,
            { show_alert: true }
        )
        return
    }

    await ctx.editMessageText(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚úçÔ∏è *Savolingizni yozing* ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `üìù O'qituvchiga yo'naltirmoqchi bo'lgan savolingizni yozing.`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå Bekor qilish', callback_data: 'cancel_question' }],
                ],
            },
        }
    )

    tempData.pendingMessages.set(userId, {
        status: 'waiting_question',
        timestamp: Date.now(),
    })
})

// –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
bot.action('cancel_question', async ctx => {
    const userId = ctx.from.id
    tempData.pendingMessages.delete(userId)

    await ctx.editMessageText(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚ùå *Savol bekor qilindi* ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `Yana savol berish uchun tugmani bosing:`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úçÔ∏è Savol berish', callback_data: 'ask_question' }],
                ],
            },
        }
    )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
bot.action(/reply_(\d+)/, async ctx => {
    const messageId = parseInt(ctx.match[1])
    const adminId = ctx.from.id

    if (!isAdmin(adminId)) {
        await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', { show_alert: true })
        return
    }

    const awaitingResponse = tempData.awaitingResponse.get(adminId)
    if (!awaitingResponse || awaitingResponse.messageId !== messageId) {
        await ctx.answerCbQuery('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ!', {
            show_alert: true,
        })
        return
    }

    const studentInfo = awaitingResponse.studentUsername !== "yo'q"
        ? `${escapeMarkdown(awaitingResponse.studentName)} (@${escapeMarkdown(awaitingResponse.studentUsername)})`
        : escapeMarkdown(awaitingResponse.studentName)

    await ctx.editMessageText(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚úçÔ∏è *–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞*    ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `üë§ *–û—Ç:* ${studentInfo}\n` +
        `üí≠ *–í–æ–ø—Ä–æ—Å:*\n` +
        `\`\`\`\n${escapeMarkdown(awaitingResponse.originalQuestion)}\n\`\`\`\n\n` +
        `üìù *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_reply_${messageId}` }],
                ],
            },
        }
    )

    await ctx.answerCbQuery('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞
bot.action(/cancel_reply_(\d+)/, async ctx => {
    const messageId = parseInt(ctx.match[1])
    const adminId = ctx.from.id

    const awaitingResponse = tempData.awaitingResponse.get(adminId)
    if (awaitingResponse && awaitingResponse.messageId === messageId) {
        const studentInfo = awaitingResponse.studentUsername !== "yo'q"
            ? `${escapeMarkdown(awaitingResponse.studentName)} (@${escapeMarkdown(awaitingResponse.studentUsername)})`
            : escapeMarkdown(awaitingResponse.studentName)

        await ctx.editMessageText(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üë§ *–û—Ç:* ${studentInfo}\n` +
            `üí≠ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n` +
            `\`\`\`\n${escapeMarkdown(awaitingResponse.originalQuestion)}\n\`\`\``,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${messageId}` }],
                    ],
                },
            }
        )

        await ctx.answerCbQuery('‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω')
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
    const userId = ctx.from.id
    const messageText = ctx.message.text

    if (isAdmin(userId)) {
        const awaitingResponse = tempData.awaitingResponse.get(userId)
        if (awaitingResponse) {
            await handleTeacherResponse(ctx, awaitingResponse, messageText)
            return
        }

        await ctx.reply(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üéì *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üîÑ *–û–∂–∏–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤...*`,
            { parse_mode: 'Markdown' }
        )
        return
    }

    const pendingQuestion = tempData.pendingMessages.get(userId)
    if (!pendingQuestion || pendingQuestion.status !== 'waiting_question') {
        await ctx.reply(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üí¨ *Savol berish*    ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `Savol berish uchun tugmani bosing:`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úçÔ∏è Savol berish', callback_data: 'ask_question' }],
                    ],
                },
            }
        )
        return
    }

    if (!canSendMessage(userId)) {
        const timeLeft = getTimeUntilNextMessage(userId)
        await ctx.reply(
            `‚è∞ Keyingi savol berish uchun ${formatTime(timeLeft)} kutishingiz kerak!`
        )
        return
    }

    const messageId = generateMessageId()
    const studentName = ctx.from.first_name || "Noma'lum"
    const studentUsername = ctx.from.username || "yo'q"

    const messageData = {
        id: messageId,
        studentId: userId,
        studentName: studentName,
        studentUsername: studentUsername,
        text: messageText,
        timestamp: Date.now(),
        answered: false,
    }

    tempData.lastMessageTime.set(userId, Date.now())
    tempData.pendingMessages.delete(userId)

    let notificationsSent = 0
    let errors = []

    for (const adminId of ADMIN_IDS) {
        try {
            const escapedMessageText = escapeMarkdown(messageText)
            const escapedStudentName = escapeMarkdown(studentName)
            const escapedStudentUsername = escapeMarkdown(studentUsername)

            const studentInfo = studentUsername !== "yo'q"
                ? `${escapedStudentName} (@${escapedStudentUsername})`
                : escapedStudentName

            await bot.telegram.sendMessage(
                adminId,
                `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
                `‚îÇ üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚îÇ\n` +
                `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
                `üë§ *–û—Ç:* ${studentInfo}\n` +
                `üí≠ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n` +
                `\`\`\`\n${escapedMessageText}\n\`\`\``,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìù –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${messageId}` }],
                        ],
                    },
                }
            )

            tempData.awaitingResponse.set(adminId, {
                messageId: messageId,
                studentId: userId,
                studentName: studentName,
                studentUsername: studentUsername,
                originalQuestion: messageText,
                timestamp: Date.now(),
            })

            notificationsSent++
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, error.message)
            errors.push(`Admin ${adminId}: ${error.message}`)
        }
    }

    await ctx.reply(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚úÖ *Savolingiz yuborildi!* ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `üì§ *Savolingiz:*\n` +
        `\`\`\`\n${messageText}\n\`\`\`\n\n` +
        `üìä *Qabul qilgan o'qituvchilar:* ${notificationsSent}\n` +
        `‚è∞ *Keyingi savol:* 30 soniya kutish`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úçÔ∏è Yana savol berish', callback_data: 'ask_question' }],
                ],
            },
        }
    )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —É—á–∏—Ç–µ–ª—è
async function handleTeacherResponse(ctx, awaitingResponse, responseText) {
    const { messageId, studentId, studentName, studentUsername, originalQuestion } = awaitingResponse;

    try {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const escapedOriginalQuestion = escapeMarkdown(originalQuestion);
        const escapedResponseText = escapeMarkdown(responseText);
        const escapedStudentName = escapeMarkdown(studentName);
        const escapedStudentUsername = studentUsername !== "yo'q" 
            ? escapeMarkdown(studentUsername) 
            : null;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        const studentMessage = `
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üì® *Javob keldi!*    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚ùì *Sizning savolingiz:*
\`\`\`
${escapedOriginalQuestion}
\`\`\`

üë®‚Äçüè´ *O'qituvchi javobi:*
\`\`\`
${escapedResponseText}
\`\`\`
        `.trim();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
        await bot.telegram.sendMessage(
            studentId,
            studentMessage,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úçÔ∏è Yana savol berish', callback_data: 'ask_question' }],
                    ],
                },
            }
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ —É—á–∏—Ç–µ–ª—é
        const studentInfo = escapedStudentUsername 
            ? `${escapedStudentName} (@${escapedStudentUsername})` 
            : escapedStudentName;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
        await ctx.replyWithMarkdown(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚úÖ *–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* ${studentInfo}
üì§ *–í–∞—à –æ—Ç–≤–µ—Ç:*
\`\`\`
${escapedResponseText}
\`\`\`
        `.trim());

        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        tempData.awaitingResponse.delete(ctx.from.id);

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫—É ${studentId}:`, error);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let errorMessage;
        if (error.code === 403) {
            errorMessage = '–£—á–µ–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —á–∞—Ç.';
        } else if (error.code === 400) {
            errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞.';
        } else {
            errorMessage = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.';
        }

        await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!*

${errorMessage}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–µ–Ω–∏–∫–æ–º –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.
        `.trim());

        // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –æ–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç
        tempData.awaitingResponse.delete(ctx.from.id);
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
setInterval(() => {
    const now = Date.now()
    const tenMinutes = 10 * 60 * 1000

    for (const [key, value] of tempData.pendingMessages) {
        if (value.timestamp && now - value.timestamp > tenMinutes) {
            tempData.pendingMessages.delete(key)
        }
    }

    for (const [key, value] of tempData.awaitingResponse) {
        if (value.timestamp && now - value.timestamp > tenMinutes) {
            tempData.awaitingResponse.delete(key)
        }
    }
}, 10 * 60 * 1000)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err)
    if (ctx.reply) {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    }
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log(`üë• –ê–¥–º–∏–Ω—ã: ${ADMIN_IDS.join(', ')}`)
})

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))