require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const crypto = require('crypto');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ê–¥–º–∏–Ω—ã (—É—á–∏—Ç–µ–ª—è) –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const ADMIN_IDS = process.env.ADMIN_CHAT_IDS ? process.env.ADMIN_CHAT_IDS.split(',').map(id => parseInt(id.trim())) : [];
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (!process.env.BOT_TOKEN) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

if (!process.env.ADMIN_CHAT_IDS) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: ADMIN_CHAT_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

if (ADMIN_IDS.length === 0) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å ADMIN_CHAT_IDS');
    process.exit(1);
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
const tempData = {
    lastMessageTime: new Map(), // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    pendingMessages: new Map(), // –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageCounter: 0, // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    awaitingResponse: new Map() // –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤
function escapeMarkdown(text) {
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown v1
    return text.replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

// –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏)
function encryptData(text) {
    const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return encrypted;
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function decryptData(encryptedText) {
    const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);
    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
    const result = ADMIN_IDS.includes(userId);
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: userId=${userId}, ADMIN_IDS=${ADMIN_IDS}, result=${result}`);
    return result;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (30 —Å–µ–∫—É–Ω–¥)
function canSendMessage(userId) {
    const lastTime = tempData.lastMessageTime.get(userId);
    if (!lastTime) return true;
    return Date.now() - lastTime >= 30000; // 30 —Å–µ–∫—É–Ω–¥
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function getTimeUntilNextMessage(userId) {
    const lastTime = tempData.lastMessageTime.get(userId);
    if (!lastTime) return 0;
    const timeLeft = 30000 - (Date.now() - lastTime);
    return Math.max(0, Math.ceil(timeLeft / 1000));
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
function formatTime(seconds) {
    if (seconds < 60) return `${seconds} soniya`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes} daqiqa ${remainingSeconds} soniya`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
function generateMessageId() {
    return ++tempData.messageCounter;
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    const userType = isAdmin(userId) ? 'ADMIN' : 'STUDENT';
    const action = ctx.message?.text || ctx.callbackQuery?.data || 'unknown';
    
    console.log(`[${new Date().toISOString()}] ${userType} ${userId}: ${action}`);
    
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤)
bot.command('myid', async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const username = ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const firstName = ctx.from.first_name || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    
    await ctx.reply(
        `üÜî *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n` +
        `üë§ User ID: \`${userId}\`\n` +
        `üí¨ Chat ID: \`${chatId}\`\n` +
        `üë§ Username: @${username}\n` +
        `üìù –ò–º—è: ${firstName}\n\n` +
        `üìã *–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chat ID*`,
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
bot.command('status', async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const isUserAdmin = isAdmin(userId);
    const isChatAdmin = isAdmin(chatId);
    
    await ctx.reply(
        `üìä *–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n` +
        `üë§ User ID: ${userId}\n` +
        `üí¨ Chat ID: ${chatId}\n` +
        `üîë –ê–¥–º–∏–Ω (–ø–æ User ID): ${isUserAdmin ? '‚úÖ' : '‚ùå'}\n` +
        `üîë –ê–¥–º–∏–Ω (–ø–æ Chat ID): ${isChatAdmin ? '‚úÖ' : '‚ùå'}\n\n` +
        `üìã *–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã:* ${ADMIN_IDS.join(', ')}\n\n` +
        `üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chat ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤`,
        { parse_mode: 'Markdown' }
    );
});

bot.start(async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞: userId=${userId}, chatId=${chatId}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ userId –∏ chatId)
    if (isAdmin(userId) || isAdmin(chatId)) {
        console.log(`–ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${userId} (chatId: ${chatId})`);
        
        const welcomeMessage = `
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É—á–∏—Ç–µ–ª—å!* ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìä *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞*

‚úÖ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
‚úÖ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ

üÜî *–í–∞—à Chat ID:* \`${chatId}\`
        `;
        
        await ctx.replyWithMarkdown(welcomeMessage);
    } else {
        console.log(`–£—á–µ–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${userId} (chatId: ${chatId})`);
        
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É—á–µ–Ω–∏–∫)
        const welcomeMessage = `
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üåü *Assalomu alaykum!* üåü ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìö *O'qituvchi-O'quvchi Bot*ga xush kelibsiz!

‚ú® *Imkoniyatlar:*
‚Ä¢ O'qituvchiga savollar berish
‚Ä¢ Tezkor javob olish
‚Ä¢ Oson foydalanish

‚ö†Ô∏è *Muhim:* Ma'lumotlar xavfsiz saqlanadi

üîπ *Savol berish uchun tugmani bosing:*
        `;
        
        await ctx.replyWithMarkdown(welcomeMessage, 
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úçÔ∏è Savol berish', 'ask_question')]
            ])
        );
    }
});

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤)
bot.action('ask_question', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if (isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', { show_alert: true });
        return;
    }
    
    if (!canSendMessage(userId)) {
        const timeLeft = getTimeUntilNextMessage(userId);
        await ctx.answerCbQuery(
            `‚è∞ Keyingi savol berish uchun ${formatTime(timeLeft)} kutishingiz kerak!`,
            { show_alert: true }
        );
        return;
    }
    
    await ctx.editMessageText(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚úçÔ∏è *Savolingizni yozing* ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `üìù O'qituvchiga yo'naltirmoqchi bo'lgan savolingizni yozing.\n\n` +
        `‚è∞ *Eslatma:* Har 30 soniyada faqat bitta savol berish mumkin.`,
        { 
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå Bekor qilish', callback_data: 'cancel_question' }]
                ]
            }
        }
    );
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    tempData.pendingMessages.set(userId, { 
        status: 'waiting_question', 
        timestamp: Date.now() 
    });
});

// –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
bot.action('cancel_question', async (ctx) => {
    const userId = ctx.from.id;
    tempData.pendingMessages.delete(userId);
    
    await ctx.editMessageText(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚ùå *Savol bekor qilindi* ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `Yana savol berish uchun tugmani bosing:`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úçÔ∏è Savol berish', callback_data: 'ask_question' }]
                ]
            }
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
bot.action(/reply_(\d+)/, async (ctx) => {
    const messageId = parseInt(ctx.match[1]);
    const adminId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if (!isAdmin(adminId)) {
        await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', { show_alert: true });
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const awaitingResponse = tempData.awaitingResponse.get(adminId);
    if (!awaitingResponse || awaitingResponse.messageId !== messageId) {
        await ctx.answerCbQuery('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ!', { show_alert: true });
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await ctx.editMessageText(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚úçÔ∏è *–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞*    ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `üë§ *–û—Ç:* ${escapeMarkdown(awaitingResponse.studentName)}\n` +
        `üí≠ *–í–æ–ø—Ä–æ—Å:*\n` +
        `\`\`\`\n${escapeMarkdown(awaitingResponse.originalQuestion)}\n\`\`\`\n\n` +
        `üìù *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_reply_${messageId}` }]
                ]
            }
        }
    );
    
    await ctx.answerCbQuery('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞
bot.action(/cancel_reply_(\d+)/, async (ctx) => {
    const messageId = parseInt(ctx.match[1]);
    const adminId = ctx.from.id;
    
    const awaitingResponse = tempData.awaitingResponse.get(adminId);
    if (awaitingResponse && awaitingResponse.messageId === messageId) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageText(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üë§ *–û—Ç:* ${escapeMarkdown(awaitingResponse.studentName)}\n` +
            `üí≠ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n` +
            `\`\`\`\n${escapeMarkdown(awaitingResponse.originalQuestion)}\n\`\`\``,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${messageId}` }]
                    ]
                }
            }
        );
        
        await ctx.answerCbQuery('‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const messageText = ctx.message.text;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if (isAdmin(userId)) {
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        const awaitingResponse = tempData.awaitingResponse.get(userId);
        if (awaitingResponse) {
            await handleTeacherResponse(ctx, awaitingResponse, messageText);
            return;
        }
        
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await ctx.reply(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üéì *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üîÑ *–û–∂–∏–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤...*`,
            { parse_mode: 'Markdown' }
        );
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞
    const pendingQuestion = tempData.pendingMessages.get(userId);
    if (!pendingQuestion || pendingQuestion.status !== 'waiting_question') {
        await ctx.reply(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üí¨ *Savol berish*    ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `Savol berish uchun tugmani bosing:`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úçÔ∏è Savol berish', callback_data: 'ask_question' }]
                    ]
                }
            }
        );
        return;
    }
    
    if (!canSendMessage(userId)) {
        const timeLeft = getTimeUntilNextMessage(userId);
        await ctx.reply(
            `‚è∞ Keyingi savol berish uchun ${formatTime(timeLeft)} kutishingiz kerak!`
        );
        return;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageId = generateMessageId();
    const studentName = ctx.from.first_name || 'Noma\'lum';
    const studentUsername = ctx.from.username || 'yo\'q';
    
    const messageData = {
        id: messageId,
        studentId: userId,
        studentName: studentName,
        studentUsername: studentUsername,
        text: messageText,
        timestamp: Date.now(),
        answered: false
    };
    
    tempData.lastMessageTime.set(userId, Date.now());
    tempData.pendingMessages.delete(userId);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    let notificationsSent = 0;
    let errors = [];
    
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ${ADMIN_IDS.length} –∞–¥–º–∏–Ω–∞–º: ${ADMIN_IDS.join(', ')}`);
    
    for (const adminId of ADMIN_IDS) {
        try {
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminId}...`);
            
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Markdown
            const escapedMessageText = escapeMarkdown(messageText);
            const escapedStudentName = escapeMarkdown(studentName);
            const escapedStudentUsername = escapeMarkdown(studentUsername);
            
            const sentMessage = await bot.telegram.sendMessage(adminId,
                `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
                `‚îÇ üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚îÇ\n` +
                `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
                `üë§ *–û—Ç:* ${escapedStudentName}\n` +
                `üí≠ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n` +
                `\`\`\`\n${escapedMessageText}\n\`\`\``,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìù –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${messageId}` }]
                        ]
                    }
                }
            );
            
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}, message_id: ${sentMessage.message_id}`);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            tempData.awaitingResponse.set(adminId, {
                messageId: messageId,
                studentId: userId,
                studentName: studentName,
                originalQuestion: messageText,
                timestamp: Date.now()
            });
            
            notificationsSent++;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
            errors.push(`Admin ${adminId}: ${error.message}`);
        }
    }
    
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${notificationsSent}/${ADMIN_IDS.length} —É—Å–ø–µ—à–Ω–æ`);
    if (errors.length > 0) {
        console.log(`–û—à–∏–±–∫–∏: ${errors.join('; ')}`);
    }
    
    await ctx.reply(
        `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
        `‚îÇ ‚úÖ *Savolingiz yuborildi!* ‚îÇ\n` +
        `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
        `üì§ *Savolingiz:*\n` +
        `\`\`\`\n${messageText}\n\`\`\`\n\n` +
        `üìä *Qabul qilgan o'qituvchilar:* ${notificationsSent}\n` +
        `‚è∞ *Keyingi savol:* 30 soniya kutish`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úçÔ∏è Yana savol berish', callback_data: 'ask_question' }]
                ]
            }
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —É—á–∏—Ç–µ–ª—è
async function handleTeacherResponse(ctx, awaitingResponse, responseText) {
    const { messageId, studentId, studentName, originalQuestion } = awaitingResponse;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫—É
    try {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Markdown
        const escapedOriginalQuestion = escapeMarkdown(originalQuestion);
        const escapedResponseText = escapeMarkdown(responseText);
        
        await bot.telegram.sendMessage(studentId,
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ üì® *Javob keldi!*    ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `‚ùì *Sizning savolingiz:*\n` +
            `\`\`\`\n${escapedOriginalQuestion}\n\`\`\`\n\n` +
            `üë®‚Äçüè´ *O'qituvchi javobi:*\n` +
            `\`\`\`\n${escapedResponseText}\n\`\`\``,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úçÔ∏è Yana savol berish', callback_data: 'ask_question' }]
                    ]
                }
            }
        );
        
        await ctx.reply(
            `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n` +
            `‚îÇ ‚úÖ *–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* ‚îÇ\n` +
            `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n` +
            `üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* ${studentName}\n` +
            `üì§ *–í–∞—à –æ—Ç–≤–µ—Ç:*\n` +
            `\`\`\`\n${responseText}\n\`\`\`\n\n` +
            `üîÑ *–û–∂–∏–¥–∞—é –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã...*`,
            { parse_mode: 'Markdown' }
        );
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        tempData.awaitingResponse.delete(ctx.from.id);
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫—É ${studentId}:`, error);
        await ctx.reply(
            `‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!*\n\n` +
            `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É. –í–æ–∑–º–æ–∂–Ω–æ:\n` +
            `‚Ä¢ –£—á–µ–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n` +
            `‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            { parse_mode: 'Markdown' }
        );
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    const tenMinutes = 10 * 60 * 1000;
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for (const [key, value] of tempData.pendingMessages) {
        if (value.timestamp && now - value.timestamp > tenMinutes) {
            tempData.pendingMessages.delete(key);
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —É—á–∏—Ç–µ–ª–µ–π
    for (const [key, value] of tempData.awaitingResponse) {
        if (value.timestamp && now - value.timestamp > tenMinutes) {
            tempData.awaitingResponse.delete(key);
        }
    }
    
    console.log(`[${new Date().toISOString()}] –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
}, 10 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
    if (ctx.reply) {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üë• –ê–¥–º–∏–Ω—ã: ${ADMIN_IDS.join(', ')}`);
    console.log('üîí –î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫');
});

// Graceful shutdown
process.once('SIGINT', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    bot.stop('SIGTERM');
});